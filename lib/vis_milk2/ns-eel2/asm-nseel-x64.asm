; THIS FILE AUTOGENERATED FROM asm-nseel-x86-gcc.c by a2x64.php

%define NSEEL_RAM_BLOCKS_DEFAULTMAX 128
%define NSEEL_RAM_BLOCKS_LOG2 9
%define NSEEL_RAM_ITEMSPERBLOCK_LOG2 16
%define NSEEL_RAM_BLOCKS (1 << NSEEL_RAM_BLOCKS_LOG2)
%define NSEEL_RAM_ITEMSPERBLOCK (1<<NSEEL_RAM_ITEMSPERBLOCK_LOG2)
%define EEL_F_SIZE 8
%define TARGET_X64
SECTION .text
%ifndef AMD64ABI
%define X64_EXTRA_STACK_SPACE 32  ;  win32 requires allocating space for 4 parameters at 8 bytes each, even though we pass via register
%endif


global nseel_asm_1pdd
nseel_asm_1pdd:


db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90

    mov rdi, qword 0xFEFEFEFEFEFEFEFE
%ifdef TARGET_X64
    fstp qword [rsi]
    movq xmm0, [rsi]
%ifdef AMD64ABI
       mov r15, rsi
       call rdi
       mov rsi, r15
%else
       sub rsp, X64_EXTRA_STACK_SPACE
       call rdi
       add rsp, X64_EXTRA_STACK_SPACE
%endif
    movq [rsi], xmm0
    fld qword [rsi]
%else
    sub rsp, 16
    fstp qword [rsp]
    call rdi
    add rsp, 16
%endif

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90



global nseel_asm_1pdd_end
nseel_asm_1pdd_end:


global nseel_asm_2pdd
nseel_asm_2pdd:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90

    mov rdi, qword 0xFEFEFEFEFEFEFEFE
%ifdef TARGET_X64
    fstp qword [rsi+8]
    fstp qword [rsi]
    movq xmm1, [rsi+8]
    movq xmm0, [rsi]
%ifdef AMD64ABI
      mov r15, rsi
      call rdi
      mov rsi, r15
%else
      sub rsp, X64_EXTRA_STACK_SPACE
      call rdi
      add rsp, X64_EXTRA_STACK_SPACE
%endif
    movq [rsi], xmm0
    fld qword [rsi]
%else
    sub rsp, 16
    fstp qword [rsp+8]
    fstp qword [rsp]
    call rdi
    add rsp, 16
%endif

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_2pdd_end
nseel_asm_2pdd_end:


global nseel_asm_2pdds
nseel_asm_2pdds:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90

    mov rax, qword 0xFEFEFEFEFEFEFEFE
%ifdef TARGET_X64
    fstp qword [rsi]
    movq xmm0, [rdi]
    movq xmm1, [rsi]
%ifdef AMD64ABI
      mov r15, rsi
      mov r14, rdi
      call rax
      mov rdi, r14  ;  restore thrashed rdi 
      mov rsi, r15
      mov rax, r14  ;  set return value 
      movq [r14], xmm0
%else
      sub rsp, X64_EXTRA_STACK_SPACE
      call rax
      movq [rdi], xmm0
      mov rax, rdi  ;  set return value 
      add rsp, X64_EXTRA_STACK_SPACE
%endif
%else
    sub rsp, 8
    fstp qword [rsp]
    push dword [rdi+4]  ;  push parameter 
    push dword [rdi]     ;  push the rest of the parameter 
    call rax
    add rsp, 16
    fstp qword [rdi]  ;  store result 
    mov rax, rdi  ;  set return value 
%endif

     ;  denormal-fix result (this is only currently used for pow_op, so we want this!)
    mov edx, dword [rdi+4]
    add rdx, 0x00100000
    and rdx, 0x7FF00000
    cmp rdx, 0x00100000
    jg label_0
      sub rdx, rdx
%ifdef TARGET_X64
      mov qword [rdi], rdx
%else
      mov dword [rdi], edx
      mov dword [rdi+4], edx
%endif
label_0:
    

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90



global nseel_asm_2pdds_end
nseel_asm_2pdds_end:


global nseel_asm_exec2
nseel_asm_exec2:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
      
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_exec2_end
nseel_asm_exec2_end:


global nseel_asm_invsqrt
nseel_asm_invsqrt:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    mov rdx, 0x5f3759df
    fst dword [rsi]
%ifdef TARGET_X64
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    fmul qword [rax]
    movsx rcx, dword [rsi]
%else
    fmul qword [qword 0xFEFEFEFEFEFEFEFE]
    mov ecx, dword [rsi]
%endif
    sar rcx, 1
    sub rdx, rcx
    mov dword [rsi], edx
    fmul dword [rsi]
    fmul dword [rsi]
%ifdef TARGET_X64
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    fadd qword [rax]
%else
    fadd qword [qword 0xFEFEFEFEFEFEFEFE]
%endif
    fmul dword [rsi]

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_invsqrt_end
nseel_asm_invsqrt_end:


global nseel_asm_dbg_getstackptr
nseel_asm_dbg_getstackptr:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%ifdef __clang__
    ffree st0
%else
    fstp st0
%endif
    mov dword [rsi], esp
    fild dword [rsi]

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_dbg_getstackptr_end
nseel_asm_dbg_getstackptr_end:


global nseel_asm_sin
nseel_asm_sin:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fsin
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_sin_end
nseel_asm_sin_end:


global nseel_asm_cos
nseel_asm_cos:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fcos
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_cos_end
nseel_asm_cos_end:


global nseel_asm_tan
nseel_asm_tan:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fptan
    fstp st0
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_tan_end
nseel_asm_tan_end:


global nseel_asm_sqr
nseel_asm_sqr:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fmul st0, st0
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_sqr_end
nseel_asm_sqr_end:


global nseel_asm_sqrt
nseel_asm_sqrt:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fabs
    fsqrt
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_sqrt_end
nseel_asm_sqrt_end:


global nseel_asm_log
nseel_asm_log:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fldln2
    fxch
    fyl2x
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_log_end
nseel_asm_log_end:


global nseel_asm_log10
nseel_asm_log10:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fldlg2
    fxch
    fyl2x

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_log10_end
nseel_asm_log10_end:


global nseel_asm_abs
nseel_asm_abs:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fabs
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_abs_end
nseel_asm_abs_end:


global nseel_asm_assign
nseel_asm_assign:
%ifdef TARGET_X64

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    mov rdx, qword [rax]
    mov rcx, rdx
    shr rdx, 32
    add rdx, 0x00100000
    and rdx, 0x7FF00000
    cmp rdx, 0x00100000
    mov rax, rdi
    jg label_1
      sub rcx, rcx
label_1:
    
    mov qword [rdi], rcx

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%else

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    mov ecx, dword [rax]
    mov edx, dword [rax+4]
    mov rax, rdx
    add rax, 0x00100000  ;  if exponent is zero, make exponent 0x7ff, if 7ff, make 7fe
    and rax, 0x7ff00000
    cmp rax, 0x00100000
    jg label_2
      sub rcx, rcx
      sub rdx, rdx
label_2:
    
    mov rax, rdi
    mov dword [rdi], ecx
    mov dword [rdi+4], edx

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%endif


global nseel_asm_assign_end
nseel_asm_assign_end:


global nseel_asm_assign_fromfp
nseel_asm_assign_fromfp:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fstp qword [rdi]
    mov edx, dword [rdi+4]
    add rdx, 0x00100000
    and rdx, 0x7FF00000
    cmp rdx, 0x00100000
    mov rax, rdi
    jg label_3
      sub rdx, rdx
%ifdef TARGET_X64
      mov qword [rdi], rdx
%else
      mov dword [rdi], edx
      mov dword [rdi+4], edx
%endif
label_3:
    

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_assign_fromfp_end
nseel_asm_assign_fromfp_end:


global nseel_asm_assign_fast_fromfp
nseel_asm_assign_fast_fromfp:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    mov rax, rdi
    fstp qword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_assign_fast_fromfp_end
nseel_asm_assign_fast_fromfp_end:


global nseel_asm_assign_fast
nseel_asm_assign_fast:
%ifdef TARGET_X64

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    mov rdx, qword [rax]
    mov qword [rdi], rdx
    mov rax, rdi
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%else

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    mov ecx, dword [rax]
    mov dword [rdi], ecx
    mov ecx, dword [rax+4]

    mov rax, rdi
    mov dword [rdi+4], ecx
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%endif


global nseel_asm_assign_fast_end
nseel_asm_assign_fast_end:


global nseel_asm_add
nseel_asm_add:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%ifdef __clang__
          faddp st1
%else
          fadd
%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_add_end
nseel_asm_add_end:


global nseel_asm_add_op
nseel_asm_add_op:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fadd qword [rdi]
    mov rax, rdi
    fstp qword [rdi]

    mov edx, dword [rdi+4]
    add rdx, 0x00100000
    and rdx, 0x7FF00000
    cmp rdx, 0x00100000
    jg label_4
      sub rdx, rdx
%ifdef TARGET_X64
      mov qword [rdi], rdx
%else
      mov dword [rdi], edx
      mov dword [rdi+4], edx
%endif
label_4:
    
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_add_op_end
nseel_asm_add_op_end:


global nseel_asm_add_op_fast
nseel_asm_add_op_fast:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fadd qword [rdi]
    mov rax, rdi
    fstp qword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_add_op_fast_end
nseel_asm_add_op_fast_end:


global nseel_asm_sub
nseel_asm_sub:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%ifdef __clang__
    fsubrp st1, st0
%else
%ifdef __GNUC__
%ifdef __INTEL_COMPILER
      fsub
%else
      fsubr  ;  gnuc has fsub/fsubr backwards, ack
%endif
%else
    fsub
%endif
%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_sub_end
nseel_asm_sub_end:


global nseel_asm_sub_op
nseel_asm_sub_op:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fsubr qword [rdi]
    mov rax, rdi
    fstp qword [rdi]

    mov edx, dword [rdi+4]
    add rdx, 0x00100000
    and rdx, 0x7FF00000
    cmp rdx, 0x00100000
    jg label_5
      sub rdx, rdx
%ifdef TARGET_X64
      mov qword [rdi], rdx
%else
      mov dword [rdi], edx
      mov dword [rdi+4], edx
%endif
label_5:
    
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_sub_op_end
nseel_asm_sub_op_end:


global nseel_asm_sub_op_fast
nseel_asm_sub_op_fast:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fsubr qword [rdi]
    mov rax, rdi
    fstp qword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_sub_op_fast_end
nseel_asm_sub_op_fast_end:


global nseel_asm_mul
nseel_asm_mul:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%ifdef __clang__
          fmulp st1, st0
%else
          fmul
%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_mul_end
nseel_asm_mul_end:


global nseel_asm_mul_op
nseel_asm_mul_op:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fmul qword [rdi]
    mov rax, rdi
    fstp qword [rdi]

    mov edx, dword [rdi+4]
    add rdx, 0x00100000
    and rdx, 0x7FF00000
    cmp rdx, 0x00100000
    jg label_6
      sub rdx, rdx
%ifdef TARGET_X64
      mov qword [rdi], rdx
%else
      mov dword [rdi], edx
      mov dword [rdi+4], edx
%endif
label_6:
    
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_mul_op_end
nseel_asm_mul_op_end:


global nseel_asm_mul_op_fast
nseel_asm_mul_op_fast:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fmul qword [rdi]
    mov rax, rdi
    fstp qword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_mul_op_fast_end
nseel_asm_mul_op_fast_end:


global nseel_asm_div
nseel_asm_div:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%ifdef __clang__
    fdivrp st1
%else
%ifdef __GNUC__
%ifdef __INTEL_COMPILER
      fdiv
%else
      fdivr  ;  gcc inline asm seems to have fdiv/fdivr backwards
%endif
%else
    fdiv
%endif
%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_div_end
nseel_asm_div_end:


global nseel_asm_div_op
nseel_asm_div_op:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fld qword [rdi]
%ifdef __clang__
    fdivp st1
%else
%ifndef __GNUC__
    fdivr
%else
%ifdef __INTEL_COMPILER
      fdivp st1
%else
      fdiv
%endif
%endif
%endif
    mov rax, rdi
    fstp qword [rdi]

    mov edx, dword [rdi+4]
    add rdx, 0x00100000
    and rdx, 0x7FF00000
    cmp rdx, 0x00100000
    jg label_7
      sub rdx, rdx
%ifdef TARGET_X64
      mov qword [rdi], rdx
%else
      mov dword [rdi], edx
      mov dword [rdi+4], edx
%endif
label_7:
    

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_div_op_end
nseel_asm_div_op_end:


global nseel_asm_div_op_fast
nseel_asm_div_op_fast:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fld qword [rdi]
%ifdef __clang__
    fdivp st1
%else
%ifndef __GNUC__
    fdivr
%else
%ifdef __INTEL_COMPILER
      fdivp st1
%else
      fdiv
%endif
%endif
%endif
    mov rax, rdi
    fstp qword [rdi]

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_div_op_fast_end
nseel_asm_div_op_fast_end:


global nseel_asm_mod
nseel_asm_mod:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fabs
    fisttp dword [rsi]
    fabs
    fisttp dword [rsi+4]
    xor rdx, rdx
    cmp dword [rsi], 0
    je label_8  ;  skip devide, set return to 0
    mov eax, dword [rsi+4]
    div dword [rsi]
label_8:
    
    mov dword [rsi], edx
    fild dword [rsi]

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_mod_end
nseel_asm_mod_end:


global nseel_asm_shl
nseel_asm_shl:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fisttp dword [rsi]
    fisttp dword [rsi+4]
    mov ecx, dword [rsi]
    mov eax, dword [rsi+4]
    shl rax, cl
    mov dword [rsi], eax
    fild dword [rsi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_shl_end
nseel_asm_shl_end:


global nseel_asm_shr
nseel_asm_shr:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fisttp dword [rsi]
    fisttp dword [rsi+4]
    mov ecx, dword [rsi]
    mov eax, dword [rsi+4]
    sar rax, cl
    mov dword [rsi], eax
    fild dword [rsi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_shr_end
nseel_asm_shr_end:


global nseel_asm_mod_op
nseel_asm_mod_op:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fld qword [rdi]
    fxch
    fabs
    fisttp dword [rdi]
    fabs
    fisttp dword [rsi]
    xor rdx, rdx
    cmp dword [rdi], 0
    je label_9  ;  skip devide, set return to 0
    mov eax, dword [rsi]
    div dword [rdi]
label_9:
    
    mov dword [rdi], edx
    fild dword [rdi]
    mov rax, rdi
    fstp qword [rdi]

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_mod_op_end
nseel_asm_mod_op_end:


global nseel_asm_or
nseel_asm_or:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fisttp qword [rsi]
    fisttp qword [rsi+8]
%ifdef TARGET_X64
    mov rdi, qword [rsi+8]
    or qword [rsi], rdi
%else
    mov edi, dword [rsi+8]
    mov ecx, dword [rsi+12]
    or dword [rsi], edi
    or dword [rsi+4], ecx
%endif
    fild qword [rsi]

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_or_end
nseel_asm_or_end:


global nseel_asm_or0
nseel_asm_or0:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fisttp qword [rsi]
    fild qword [rsi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_or0_end
nseel_asm_or0_end:


global nseel_asm_or_op
nseel_asm_or_op:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fld qword [rdi]
    fxch
    fisttp qword [rdi]
    fisttp qword [rsi]
%ifdef TARGET_X64
    mov rax, qword [rsi]
    or qword [rdi], rax
%else
    mov eax, dword [rsi]
    mov ecx, dword [rsi+4]
    or dword [rdi], eax
    or dword [rdi+4], ecx
%endif
    fild qword [rdi]
    mov rax, rdi
    fstp qword [rdi]

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_or_op_end
nseel_asm_or_op_end:


global nseel_asm_xor
nseel_asm_xor:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fisttp qword [rsi]
    fisttp qword [rsi+8]
%ifdef TARGET_X64
    mov rdi, qword [rsi+8]
    xor qword [rsi], rdi
%else
    mov edi, dword [rsi+8]
    mov ecx, dword [rsi+12]
    xor dword [rsi], edi
    xor dword [rsi+4], ecx
%endif
    fild qword [rsi]

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_xor_end
nseel_asm_xor_end:


global nseel_asm_xor_op
nseel_asm_xor_op:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fld qword [rdi]
    fxch
    fisttp qword [rdi]
    fisttp qword [rsi]
%ifdef TARGET_X64
    mov rax, qword [rsi]
    xor qword [rdi], rax
%else
    mov eax, dword [rsi]
    mov ecx, dword [rsi+4]
    xor dword [rdi], eax
    xor dword [rdi+4], ecx
%endif
    fild qword [rdi]
    mov rax, rdi
    fstp qword [rdi]

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_xor_op_end
nseel_asm_xor_op_end:


global nseel_asm_and
nseel_asm_and:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fisttp qword [rsi]
    fisttp qword [rsi+8]
%ifdef TARGET_X64
    mov rdi, qword [rsi+8]
    and qword [rsi], rdi
%else
    mov edi, dword [rsi+8]
    mov ecx, dword [rsi+12]
    and dword [rsi], edi
    and dword [rsi+4], ecx
%endif
    fild qword [rsi]

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_and_end
nseel_asm_and_end:


global nseel_asm_and_op
nseel_asm_and_op:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fld qword [rdi]
    fxch
    fisttp qword [rdi]
    fisttp qword [rsi]
%ifdef TARGET_X64
    mov rax, qword [rsi]
    and qword [rdi], rax
%else
    mov eax, dword [rsi]
    mov ecx, dword [rsi+4]
    and dword [rdi], eax
    and dword [rdi+4], ecx
%endif
    fild qword [rdi]
    mov rax, rdi
    fstp qword [rdi]

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_and_op_end
nseel_asm_and_op_end:


global nseel_asm_uplus
nseel_asm_uplus:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
      
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_uplus_end
nseel_asm_uplus_end:


global nseel_asm_uminus
nseel_asm_uminus:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fchs
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_uminus_end
nseel_asm_uminus_end:


global nseel_asm_sign
nseel_asm_sign:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90

%ifdef TARGET_X64


    fst qword [rsi]
    mov rdx, qword [rsi]
    mov rcx, 0x7FFFFFFFFFFFFFFF
    test rdx, rcx
    jz label_10  ;  zero zero, return the value passed directly
       ;  calculate sign
      inc rcx  ;  rcx becomes 0x80000...
      fstp st0
      fld1
      test rdx, rcx
      jz label_10
      fchs
label_10:
  	

%else

    fst dword [rsi]
    mov ecx, dword [rsi]
    mov rdx, 0x7FFFFFFF
    test rcx, rdx
    jz label_11  ;  zero zero, return the value passed directly
       ;  calculate sign
      inc rdx  ;  edx becomes 0x8000...
      fstp st0
      fld1
      test rcx, rdx
      jz label_11
      fchs
label_11:
  	

%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_sign_end
nseel_asm_sign_end:


global nseel_asm_bnot
nseel_asm_bnot:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    test rax, rax
    setz al
    and rax, 0xff
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_bnot_end
nseel_asm_bnot_end:


global nseel_asm_fcall
nseel_asm_fcall:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
     mov rdx, qword 0xFEFEFEFEFEFEFEFE
%ifdef TARGET_X64
     sub rsp, 8
     call rdx
     add rsp, 8
%else
     sub rsp, 12  ;  keep stack 16 byte aligned, 4 bytes for return address 
     call rdx
     add rsp, 12
%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_fcall_end
nseel_asm_fcall_end:


global nseel_asm_band
nseel_asm_band:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    test rax, rax
    jz label_12

     mov rcx, qword 0xFEFEFEFEFEFEFEFE
%ifdef TARGET_X64
        sub rsp, 8
%else
        sub rsp, 12
%endif
        call rcx
%ifdef TARGET_X64
        add rsp, 8
%else
        add rsp, 12
%endif
label_12:
    
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_band_end
nseel_asm_band_end:


global nseel_asm_bor
nseel_asm_bor:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    test rax, rax
    jnz label_13

    mov rcx, qword 0xFEFEFEFEFEFEFEFE
%ifdef TARGET_X64
    sub rsp, 8
%else
    sub rsp, 12
%endif
    call rcx
%ifdef TARGET_X64
    add rsp, 8
%else
    add rsp, 12
%endif
label_13:
    
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_bor_end
nseel_asm_bor_end:


global nseel_asm_equal
nseel_asm_equal:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%ifdef __clang__
    fsubp st1
%else
    fsub
%endif

    fabs
%ifdef TARGET_X64
    fcomp qword [r12+-8]  ; [g_closefact]
%else
    fcomp qword [rbx+-8]  ; [g_closefact]
%endif
    fstsw ax
    and rax, 256  ;  old behavior: if 256 set, true (NaN means true)

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_equal_end
nseel_asm_equal_end:


global nseel_asm_equal_exact
nseel_asm_equal_exact:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fcompp
    fstsw ax  ;  for equal 256 and 1024 should be clear, 16384 should be set
    and rax, 17664   ;  mask C4/C3/C1, bits 8/10/14, 16384|256|1024 -- if equals 16384, then equality
    cmp rax, 16384
    je label_14
    sub rax, rax
label_14:
    
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_equal_exact_end
nseel_asm_equal_exact_end:


global nseel_asm_notequal_exact
nseel_asm_notequal_exact:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fcompp
    fstsw ax  ;  for equal 256 and 1024 should be clear, 16384 should be set
    and rax, 17664   ;  mask C4/C3/C1, bits 8/10/14, 16384|256|1024 -- if equals 16384, then equality
    cmp rax, 16384
    je label_15
    sub rax, rax
label_15:
    
    xor rax, 16384  ;  flip the result
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_notequal_exact_end
nseel_asm_notequal_exact_end:


global nseel_asm_notequal
nseel_asm_notequal:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%ifdef __clang__
    fsubp st1
%else
    fsub
%endif

    fabs
%ifdef TARGET_X64
    fcomp qword [r12+-8]  ; [g_closefact]
%else
    fcomp qword [rbx+-8]  ; [g_closefact]
%endif
    fstsw ax
    and rax, 256
    xor rax, 256  ;  old behavior: if 256 set, FALSE (NaN makes for false)
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_notequal_end
nseel_asm_notequal_end:


global nseel_asm_above
nseel_asm_above:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fcompp
    fstsw ax
    and rax, 1280  ;   (1024+256) old behavior: NaN would mean 1, preserve that
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_above_end
nseel_asm_above_end:


global nseel_asm_beloweq
nseel_asm_beloweq:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fcompp
    fstsw ax
    and rax, 256  ;  old behavior: NaN would be 0 (ugh)
    xor rax, 256
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_beloweq_end
nseel_asm_beloweq_end:


global nseel_asm_booltofp
nseel_asm_booltofp:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    test rax, rax
    jz label_16
    fld1
    jmp label_17
label_16:
    
    fldz
label_17:
    
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_booltofp_end
nseel_asm_booltofp_end:


global nseel_asm_fptobool
nseel_asm_fptobool:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fabs
%ifdef TARGET_X64
    fcomp qword [r12+-8]  ; [g_closefact]
%else
    fcomp qword [rbx+-8]  ; [g_closefact]
%endif
    fstsw ax
    and rax, 256
    xor rax, 256
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_fptobool_end
nseel_asm_fptobool_end:


global nseel_asm_fptobool_rev
nseel_asm_fptobool_rev:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fabs
%ifdef TARGET_X64
    fcomp qword [r12+-8]  ; [g_closefact]
%else
    fcomp qword [rbx+-8]  ; [g_closefact]
%endif
    fstsw ax
    and rax, 256
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_fptobool_rev_end
nseel_asm_fptobool_rev_end:


global nseel_asm_min
nseel_asm_min:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fld qword [rdi]
    fcomp qword [rax]
    mov rcx, rax
    fstsw ax
    test rax, 256
    mov rax, rcx
    jz label_18
    mov rax, rdi
label_18:
    
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_min_end
nseel_asm_min_end:


global nseel_asm_max
nseel_asm_max:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fld qword [rdi]
    fcomp qword [rax]
    mov rcx, rax
    fstsw ax
    test rax, 256
    mov rax, rcx
    jnz label_19
    mov rax, rdi
label_19:
    
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_max_end
nseel_asm_max_end:


global nseel_asm_min_fp
nseel_asm_min_fp:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fcom
    fstsw ax
    test rax, 256
    jz label_20
    fxch
label_20:
    
    fstp st0
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_min_fp_end
nseel_asm_min_fp_end:


global nseel_asm_max_fp
nseel_asm_max_fp:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    fcom
    fstsw ax
    test rax, 256
    jnz label_21
    fxch
label_21:
    
    fstp st0
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_max_fp_end
nseel_asm_max_fp_end:


global _asm_generic3parm
_asm_generic3parm:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%ifdef TARGET_X64

%ifdef AMD64ABI

    mov r15, rsi
    mov rdx, rdi  ;  third parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context

    mov rsi, rcx  ;  second parameter = parm
    mov rcx, rax  ;  fourth parameter = parm
    mov rax, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    call rax

    mov rsi, r15
%else
    mov rdx, rcx  ;  second parameter = parm
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov r8, rdi  ;  third parameter = parm
    mov r9, rax  ;  fourth parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    sub rsp, X64_EXTRA_STACK_SPACE
    call rdi
    add rsp, X64_EXTRA_STACK_SPACE
%endif

%else

    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    push rax  ;  push parameter
    push rdi  ;  push parameter
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    push rcx  ;  push parameter
    push rdx  ;  push context pointer
    call rdi
    add rsp, 16

%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global _asm_generic3parm_end
_asm_generic3parm_end:


global _asm_generic3parm_retd
_asm_generic3parm_retd:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%ifdef TARGET_X64
%ifdef AMD64ABI
    mov r15, rsi
    mov rdx, rdi  ;  third parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov rsi, rcx  ;  second parameter = parm
    mov rcx, rax  ;  fourth parameter = parm
    mov rax, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    call rax
    mov rsi, r15
    movq [r15], xmm0
    fld qword [r15]
%else
    mov rdx, rcx  ;  second parameter = parm
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov r8, rdi  ;  third parameter = parm
    mov r9, rax  ;  fourth parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    sub rsp, X64_EXTRA_STACK_SPACE
    call rdi
    add rsp, X64_EXTRA_STACK_SPACE
    movq [rsi], xmm0
    fld qword [rsi]
%endif
%else

    sub rsp, 16
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    mov dword [rsp+8], edi
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    mov dword [rsp+12], eax
    mov dword [rsp+4], ecx
    mov dword [rsp], edx
    call rdi
    add rsp, 16

%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global _asm_generic3parm_retd_end
_asm_generic3parm_retd_end:


global _asm_generic2parm
_asm_generic2parm:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%ifdef TARGET_X64

%ifdef AMD64ABI
    mov r15, rsi
    mov rsi, rdi  ;  second parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov rdx, rax  ;  third parameter = parm
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    call rcx
    mov rsi, r15
%else
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov rdx, rdi  ;  second parameter = parm
    mov r8, rax  ;  third parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    sub rsp, X64_EXTRA_STACK_SPACE
    call rdi
    add rsp, X64_EXTRA_STACK_SPACE
%endif
%else

    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    mov rcx, qword 0xFEFEFEFEFEFEFEFE
    sub rsp, 4  ;  keep stack aligned
    push rax  ;  push parameter
    push rdi  ;  push parameter
    push rdx  ;  push context pointer
    call rcx
    add rsp, 16

%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global _asm_generic2parm_end
_asm_generic2parm_end:


global _asm_generic2parm_retd
_asm_generic2parm_retd:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%ifdef TARGET_X64
%ifdef AMD64ABI
    mov r15, rsi
    mov rsi, rdi  ;  second parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    mov rdx, rax  ;  third parameter = parm
    call rcx
    mov rsi, r15
    movq [r15], xmm0
    fld qword [r15]
%else
    mov rdx, rdi  ;  second parameter = parm
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    mov r8, rax  ;  third parameter = parm
    sub rsp, X64_EXTRA_STACK_SPACE
    call rdi
    add rsp, X64_EXTRA_STACK_SPACE
    movq [rsi], xmm0
    fld qword [rsi]
%endif
%else

    sub rsp, 16
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    mov rcx, qword 0xFEFEFEFEFEFEFEFE
    mov dword [rsp], edx
    mov dword [rsp+4], edi
    mov dword [rsp+8], eax
    call rcx
    add rsp, 16

%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global _asm_generic2parm_retd_end
_asm_generic2parm_retd_end:


global _asm_generic1parm
_asm_generic1parm:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%ifdef TARGET_X64
%ifdef AMD64ABI
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov r15, rsi
    mov rsi, rax  ;  second parameter = parm
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    call rcx
    mov rsi, r15
%else
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov rdx, rax  ;  second parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    sub rsp, X64_EXTRA_STACK_SPACE
    call rdi
    add rsp, X64_EXTRA_STACK_SPACE
%endif
%else

    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    sub rsp, 8  ;  keep stack aligned
    mov rcx, qword 0xFEFEFEFEFEFEFEFE
    push rax  ;  push parameter
    push rdx  ;  push context pointer
    call rcx
    add rsp, 16

%endif

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global _asm_generic1parm_end
_asm_generic1parm_end:


global _asm_generic1parm_retd
_asm_generic1parm_retd:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%ifdef TARGET_X64
%ifdef AMD64ABI
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter = context pointer
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  function address
    mov r15, rsi  ;  save rsi
    mov rsi, rax  ;  second parameter = parameter

    call rcx

    mov rsi, r15
    movq [r15], xmm0
    fld qword [r15]
%else
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  call function

    mov rdx, rax  ;  second parameter = parm

    sub rsp, X64_EXTRA_STACK_SPACE
    call rdi
    add rsp, X64_EXTRA_STACK_SPACE
    movq [rsi], xmm0
    fld qword [rsi]
%endif
%else

    mov rdx, qword 0xFEFEFEFEFEFEFEFE  ;  context pointer
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  func-addr
    sub rsp, 16
    mov dword [rsp+4], eax  ;  push parameter
    mov dword [rsp], edx  ;  push context pointer
    call rcx
    add rsp, 16

%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global _asm_generic1parm_retd_end
_asm_generic1parm_retd_end:


global _asm_megabuf
_asm_megabuf:


db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90

%ifdef TARGET_X64


%ifdef AMD64ABI

    fadd qword [r12+-8]

    fisttp dword [rsi]

     ;  check if (%rsi) is in range, and buffer available, otherwise call function
    mov edx, dword [rsi]
    cmp rdx, ((NSEEL_RAM_BLOCKS*NSEEL_RAM_ITEMSPERBLOCK))       ; REPLACE=((NSEEL_RAM_BLOCKS*NSEEL_RAM_ITEMSPERBLOCK))
    jae label_22
      mov rax, rdx
      shr rax, (NSEEL_RAM_ITEMSPERBLOCK_LOG2 - 3   ) ; log2(sizeof(void *))      ; REPLACE=(NSEEL_RAM_ITEMSPERBLOCK_LOG2 - 3   ) ; log2(sizeof(void *))
      and rax, ((NSEEL_RAM_BLOCKS-1)*8                    ) ; sizeof(void*)      ; REPLACE=((NSEEL_RAM_BLOCKS-1)*8                    ) ; sizeof(void*)
      mov rax, qword [r12+rax]
      test rax, rax
      jnz label_23
label_22:
    
      mov rax, qword 0xFEFEFEFEFEFEFEFE
      mov rdi, r12  ;  set first parm to ctx
      mov r15, rsi  ;  save rsi
      mov rsi, rdx  ;  esi becomes second parameter (edi is first, context pointer)
      call rax
      mov rsi, r15  ;  restore rsi
      jmp label_24
label_23:
    
      and rdx, (NSEEL_RAM_ITEMSPERBLOCK-1)       ; REPLACE=(NSEEL_RAM_ITEMSPERBLOCK-1)
      shl rdx, 3       ;  3 is log2(sizeof(EEL_F))
      add rax, rdx
label_24:
    

%else

    fadd qword [r12+-8]

    fisttp dword [rsi]

     ;  check if (%rsi) is in range...
    mov edi, dword [rsi]
    cmp rdi, ((NSEEL_RAM_BLOCKS*NSEEL_RAM_ITEMSPERBLOCK))        ; REPLACE=((NSEEL_RAM_BLOCKS*NSEEL_RAM_ITEMSPERBLOCK))
    jae label_25
      mov rax, rdi
      shr rax, (NSEEL_RAM_ITEMSPERBLOCK_LOG2 - 3   ) ; log2(sizeof(void *))        ; REPLACE=(NSEEL_RAM_ITEMSPERBLOCK_LOG2 - 3   ) ; log2(sizeof(void *))
      and rax, ((NSEEL_RAM_BLOCKS-1)*8                    ) ; sizeof(void*)        ; REPLACE=((NSEEL_RAM_BLOCKS-1)*8                    ) ; sizeof(void*)
      mov rax, qword [r12+rax]
      test rax, rax
      jnz label_26
label_25:
    
      mov rax, qword 0xFEFEFEFEFEFEFEFE  ;  function ptr
      mov rcx, r12  ;  set first parm to ctx
      mov rdx, rdi  ;  rdx is second parameter (rcx is first)
      sub rsp, X64_EXTRA_STACK_SPACE
      call rax
      add rsp, X64_EXTRA_STACK_SPACE
      jmp label_27
label_26:
    
      and rdi, (NSEEL_RAM_ITEMSPERBLOCK-1)        ; REPLACE=(NSEEL_RAM_ITEMSPERBLOCK-1)
      shl rdi, 3        ;  3 is log2(sizeof(EEL_F))
      add rax, rdi
label_27:
    
%endif


db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%else
    fadd qword [rbx+-8]
    fisttp dword [rsi]

     ;  check if (%esi) is in range, and buffer available, otherwise call function
    mov edi, dword [rsi]
    cmp rdi, ((NSEEL_RAM_BLOCKS*NSEEL_RAM_ITEMSPERBLOCK))      ; REPLACE=((NSEEL_RAM_BLOCKS*NSEEL_RAM_ITEMSPERBLOCK))
    jae label_28

      mov rax, rdi
      shr rax, (NSEEL_RAM_ITEMSPERBLOCK_LOG2 - 2   ) ; log2(sizeof(void *))       ; REPLACE=(NSEEL_RAM_ITEMSPERBLOCK_LOG2 - 2   ) ; log2(sizeof(void *))
      and rax, ((NSEEL_RAM_BLOCKS-1)*4                    ) ; sizeof(void*)       ; REPLACE=((NSEEL_RAM_BLOCKS-1)*4                    ) ; sizeof(void*)
      mov eax, dword [rbx+rax]
      test rax, rax
      jnz label_29
label_28:
    
      sub rsp, 8  ;  keep stack aligned
      mov rcx, qword 0xFEFEFEFEFEFEFEFE
      push rdi  ;  parameter
      push rbx  ;  push context pointer
      call rcx
      add rsp, 16
      jmp label_30
label_29:
    
      and rdi, (NSEEL_RAM_ITEMSPERBLOCK-1)       ; REPLACE=(NSEEL_RAM_ITEMSPERBLOCK-1)
      shl rdi, 3       ;  3 is log2(sizeof(EEL_F))
      add rax, rdi
label_30:
    
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90

%ifndef _MSC_VER
        :: i (((NSEEL_RAM_BLOCKS*NSEEL_RAM_ITEMSPERBLOCK))),
           i ((NSEEL_RAM_ITEMSPERBLOCK_LOG2 - 2   )), ; log2(sizeof(void *))
           i (((NSEEL_RAM_BLOCKS-1)*4                    )), ; sizeof(void*)
           i ((NSEEL_RAM_ITEMSPERBLOCK-1                                  ))
%endif



%endif



global _asm_megabuf_end
_asm_megabuf_end:


global _asm_gmegabuf
_asm_gmegabuf:


db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90

%ifdef TARGET_X64


%ifdef AMD64ABI

    mov r15, rsi
    fadd qword [r12+-8]
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter = context pointer
    fisttp dword [rsi]
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    mov esi, dword [rsi]
    call rdx
    mov rsi, r15

%else
    fadd qword [r12+-8]
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter = context pointer
    fisttp dword [rsi]
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    mov edx, dword [rsi]
    sub rsp, X64_EXTRA_STACK_SPACE
    call rdi
    add rsp, X64_EXTRA_STACK_SPACE
%endif


%else
    sub rsp, 16  ;  keep stack aligned
    mov dword [rsp], qword 0xFEFEFEFEFEFEFEFE
    fadd qword [rbx+-8]
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    fisttp dword [rsp+4]
    call rdi
    add rsp, 16

%endif



db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global _asm_gmegabuf_end
_asm_gmegabuf_end:


global nseel_asm_stack_push
nseel_asm_stack_push:
%ifdef TARGET_X64

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    mov rcx, qword [rax]
    mov rax, qword [rdi]
    add rax, 8
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    and rax, rdx
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    or rax, rdx
    mov qword [rax], rcx
    mov qword [rdi], rax
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%else

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    mov rdi, qword 0xFEFEFEFEFEFEFEFE

    mov ecx, dword [rax]
    mov edx, dword [rax+4]

    mov eax, dword [rdi]

    add rax, 8
    and rax, qword 0xFEFEFEFEFEFEFEFE
    or rax, qword 0xFEFEFEFEFEFEFEFE

    mov dword [rax], ecx
    mov dword [rax+4], edx

    mov dword [rdi], eax
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%endif


global nseel_asm_stack_push_end
nseel_asm_stack_push_end:


global nseel_asm_stack_pop
nseel_asm_stack_pop:
%ifdef TARGET_X64

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
      mov rdi, qword 0xFEFEFEFEFEFEFEFE
      mov rcx, qword [rdi]
      movq xmm0, [rcx]
      sub rcx, 8
      mov rdx, qword 0xFEFEFEFEFEFEFEFE
      and rcx, rdx
      mov rdx, qword 0xFEFEFEFEFEFEFEFE
      or rcx, rdx
      mov qword [rdi], rcx
      movq [rax], xmm0
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%else

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    mov ecx, dword [rdi]
    fld qword [rcx]
    sub rcx, 8
    and rcx, qword 0xFEFEFEFEFEFEFEFE
    or rcx, qword 0xFEFEFEFEFEFEFEFE
    mov dword [rdi], ecx
    fstp qword [rax]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%endif


global nseel_asm_stack_pop_end
nseel_asm_stack_pop_end:


global nseel_asm_stack_pop_fast
nseel_asm_stack_pop_fast:
%ifdef TARGET_X64

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
      mov rdi, qword 0xFEFEFEFEFEFEFEFE
      mov rcx, qword [rdi]
      mov rax, rcx
      sub rcx, 8
      mov rdx, qword 0xFEFEFEFEFEFEFEFE
      and rcx, rdx
      mov rdx, qword 0xFEFEFEFEFEFEFEFE
      or rcx, rdx
      mov qword [rdi], rcx
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%else

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    mov ecx, dword [rdi]
    mov rax, rcx
    sub rcx, 8
    and rcx, qword 0xFEFEFEFEFEFEFEFE
    or rcx, qword 0xFEFEFEFEFEFEFEFE
    mov dword [rdi], ecx
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%endif


global nseel_asm_stack_pop_fast_end
nseel_asm_stack_pop_fast_end:


global nseel_asm_stack_peek_int
nseel_asm_stack_peek_int:
%ifdef TARGET_X64

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    mov rax, qword [rdi]
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    sub rax, rdx
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    and rax, rdx
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    or rax, rdx
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%else

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    mov eax, dword [rdi]
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    sub rax, rdx
    and rax, qword 0xFEFEFEFEFEFEFEFE
    or rax, qword 0xFEFEFEFEFEFEFEFE
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%endif


global nseel_asm_stack_peek_int_end
nseel_asm_stack_peek_int_end:


global nseel_asm_stack_peek
nseel_asm_stack_peek:
%ifdef TARGET_X64

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    fisttp dword [rsi]
    mov rax, qword [rdi]
    mov rdx, qword [rsi]
    shl rdx, 3  ;  log2(sizeof(EEL_F))
    sub rax, rdx
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    and rax, rdx
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    or rax, rdx
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%else

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    fisttp dword [rsi]
    mov eax, dword [rdi]
    mov edx, dword [rsi]
    shl rdx, 3  ;  log2(sizeof(EEL_F))
    sub rax, rdx
    and rax, qword 0xFEFEFEFEFEFEFEFE
    or rax, qword 0xFEFEFEFEFEFEFEFE
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%endif


global nseel_asm_stack_peek_end
nseel_asm_stack_peek_end:


global nseel_asm_stack_peek_top
nseel_asm_stack_peek_top:
%ifdef TARGET_X64

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    mov rax, qword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%else

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    mov eax, dword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%endif


global nseel_asm_stack_peek_top_end
nseel_asm_stack_peek_top_end:


global nseel_asm_stack_exch
nseel_asm_stack_exch:
%ifdef TARGET_X64

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    mov rcx, qword [rdi]
    movq xmm0, [rcx]
    movq xmm1, [rax]
    movq [rax], xmm0
    movq [rcx], xmm1
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%else

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    mov ecx, dword [rdi]
    fld qword [rcx]
    fld qword [rax]
    fstp qword [rcx]
    fstp qword [rax]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%endif


global nseel_asm_stack_exch_end
nseel_asm_stack_exch_end:
%ifdef TARGET_X64


global eel_callcode64
eel_callcode64:

%ifndef EEL_X64_NO_CHANGE_FPFLAGS
		sub rsp, 16
		fnstcw [rsp]
		mov ax, [rsp]
		or ax, 0xE3F  ;  53 or 64 bit precision, trunc, and masking all exceptions
		mov [rsp+4], ax
		fldcw [rsp+4]
%endif
		push rbx
		push rbp
		push r12
		push r13
		push r14
		push r15

%ifdef AMD64ABI
    		mov r12, rsi  ;  second parameter is ram-blocks pointer
		call rdi
%else
		push rdi
		push rsi
    		mov r12, rdx  ;  second parameter is ram-blocks pointer
		call rcx
		pop rsi
		pop rdi
%endif

		fclex

		pop r15
		pop r14
		pop r13
		pop r12
		pop rbp
		pop rbx

%ifndef EEL_X64_NO_CHANGE_FPFLAGS
		fldcw [rsp]
		add rsp, 16
%endif

		ret


global eel_setfp_round
eel_setfp_round:

%ifndef EEL_X64_NO_CHANGE_FPFLAGS
		sub rsp, 16
		fnstcw [rsp]
		mov ax, [rsp]
		and ax, 0xF3FF  ;  set round to nearest
		mov [rsp+4], ax
		fldcw [rsp+4]
		add rsp, 16
%endif
		ret


global eel_setfp_trunc
eel_setfp_trunc:

%ifndef EEL_X64_NO_CHANGE_FPFLAGS
		sub rsp, 16
		fnstcw [rsp]
		mov ax, [rsp]
		or ax, 0xC00  ;  set to truncate
		mov [rsp+4], ax
		fldcw [rsp+4]
		add rsp, 16
%endif
		ret
%endif
